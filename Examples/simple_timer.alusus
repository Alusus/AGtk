import "Srl/Console.alusus";
import "Srl/String.alusus";
import "Srl/Memory.alusus";
import "Apm.alusus";
Apm.importFile("Alusus/Gtk");

def SimpleTimer: module
{
    def window: ref[Gtk.AppWindow];
    def hours: ref[Gtk.Label];
    def minutes: ref[Gtk.Label];
    def seconds: ref[Gtk.Label];
    def secondsInTimer: Int;

    def isPaused: bool;

    func start (): Void {
        def app: ref[Gtk.App];
        def status: Int;
        secondsInTimer = 0;
        isPaused = false;

        // start timer
        Glib.Timeout.addSeconds(1, timer~ptr, 0);

        app~ptr = Gtk.App.new("org.alusus.simple-timer", 0)~ptr;
        app.connectSignal(Gtk.Signal.ACTIVATE, Glib.cb[applicationActivated], 0, 0, 0);
        status = app.exec(0, 0);
        Glib.unref(app);
    };

    func applicationActivated (app: ref[Gtk.App], data: ptr): Void {
        def box: ref[Gtk.Box]; box~ptr = Gtk.Box.new(Gtk.Orientation.VERTICAL, 20)~ptr;
        def timer: ref[Gtk.Box]; timer~ptr = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 0)~ptr;
        def label: ref[Gtk.Label]; label~ptr = Gtk.Label.new("Timer")~ptr;
        def buttonBox: ref[Gtk.ButtonBox]; buttonBox~ptr = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL)~ptr;
        def resumeBtn: ref[Gtk.Button]; resumeBtn~ptr = Gtk.Button.newWithLabel("Resume")~ptr;
        def pauseBtn: ref[Gtk.Button]; pauseBtn~ptr = Gtk.Button.newWithLabel("Pause")~ptr;
        def resetBtn: ref[Gtk.Button]; resetBtn~ptr = Gtk.Button.newWithLabel("Reset")~ptr;

        hours~ptr = Gtk.Label.new("00")~ptr;
        minutes~ptr = Gtk.Label.new("00")~ptr;
        seconds~ptr = Gtk.Label.new("00")~ptr;

        window~ptr = Gtk.AppWindow.new(app)~ptr;
        window.setTitle("Simple Timer");
        window.setDefaultSize(480, 320);

        buttonBox.setLayout(Gtk.ButtonBoxStyle.SPREAD);
        resumeBtn.connectSignal(Gtk.Signal.CLICKED, Glib.cb[onResumeClicked], 0, 0, 0);
        buttonBox.add(resumeBtn);

        pauseBtn.connectSignal(Gtk.Signal.CLICKED, Glib.cb[onPauseClicked], 0, 0, 0);
        buttonBox.add(pauseBtn);

        resetBtn.connectSignal(Gtk.Signal.CLICKED, Glib.cb[onResetClicked], 0, 0, 0);
        buttonBox.add(resetBtn);

        box.packStart(label, 1, 0, 0);
        timer.packStart(hours, 1, 0, 0);
        timer.packStart(Gtk.Label.new(":"), 1, 0, 0);
        timer.packStart(minutes, 1, 0, 0);
        timer.packStart(Gtk.Label.new(":"), 1, 0, 0);
        timer.packStart(seconds, 1, 0, 0);
        box.packStart(timer, 1, 0, 0);
        box.packStart(buttonBox, 1, 0, 0);

        window.add(box);

        window.showAll();
    };

    func onResumeClicked (widget: ref[Gtk.Widget], data: ptr): Void {
        isPaused = false;
    };

    func onPauseClicked (widget: ref[Gtk.Widget], data: ptr): Void {
        isPaused = true;
    };

    func onResetClicked (widget: ref[Gtk.Widget], data: ptr): Void {
        secondsInTimer = 0;
        isPaused = false;
    };

    func timer(data: ptr): bool {
        if isPaused return true;

        secondsInTimer += 1;

        // display seconds on screen
        def secondsTimeIntToString: array[Char, 5];
        Srl.String.assign(secondsTimeIntToString~ptr, "%d", secondsInTimer % 60);
        seconds.setText(secondsTimeIntToString~ptr);

        // display minutes on screen
        def minutesTimeIntToString: array[Char, 5];
        Srl.String.assign(minutesTimeIntToString~ptr, "%d", (secondsInTimer / 60) % 60);
        minutes.setText(minutesTimeIntToString~ptr);

        // display hours on screen
        def hoursTimeIntToString: array[Char, 5];
        Srl.String.assign(hoursTimeIntToString~ptr, "%d", (secondsInTimer / 60 / 60) % 24);
        hours.setText(hoursTimeIntToString~ptr);

        return true;
    };
};

SimpleTimer.start();
