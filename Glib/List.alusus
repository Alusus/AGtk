import "./common.alusus";

@merge def Glib: module
{
  def List: type
  {
    def data: ptr;
    def next: ptr[List];
    def prev: ptr[List];

    @shared
    @expname[g_list_append]
    func append (list: ptr[List], data: ptr) => ptr[List];

    @shared
    @expname[g_list_prepend]
    func prepend (list: ptr[List], data: ptr) => ptr[List];

    @shared
    @expname[g_list_insert]
    func insert (list: ptr[List], data: ptr, position: Int) => ptr[List];

    @shared
    @expname[g_list_insert_before]
    func insertBefore (list: ptr[List], sibling: ptr[List], data: ptr) => ptr[List];

    @shared
    @expname[g_list_insert_sorted_with_data]
    func insertSorted (list: ptr[List], data: ptr, fn: CompareDataFunc, userData: ptr) => ptr[List];

    @shared
    @expname[g_list_remove]
    func remove (list: ptr[List], data: ptr) => ptr[List];

    @shared
    @expname[g_list_remove_link]
    func removeLink (list: ptr[List], link: ptr[List]) => ptr[List];

    @shared
    @expname[g_list_delete_link]
    func deleteLink (list: ptr[List], link: ptr[List]) => ptr[List];

    @shared
    @expname[g_list_remove_all]
    func removeAll (list: ptr[List], data: ptr) => ptr[List];

    @shared
    @expname[g_list_free]
    func free (list: ptr[List]);

    @shared
    @expname[g_list_free_full]
    func freeFull (list: ptr[List], fn: DestroyNotify);

    @shared
    @expname[g_list_alloc]
    func alloc () => ptr[List];

    @shared
    @expname[g_list_free_1]
    func freeOne (list: ptr[List]);

    @shared
    @expname[g_list_length]
    func getLength (list: ptr[List]) => Int;

    @shared
    @expname[g_list_copy]
    func copy (list: ptr[List]) => ptr[List];

    @shared
    @expname[g_list_copy_deep]
    func copyDeep (list: ptr[List], fn: CopyFunc, userData: ptr) => ptr[List];

    @shared
    @expname[g_list_reverse]
    func reverse (list: ptr[List]) => ptr[List];

    @shared
    @expname[g_list_sort_with_data]
    func sort (list: ptr[List], fn: CompareDataFunc, userData: ptr) => ptr[List];

    @shared
    @expname[g_list_concat]
    func concat (list1: ptr[List], list2: ptr[List]) => ptr[List];

    @shared
    @expname[g_list_foreach]
    func foreach (list: ptr[List], fn: Func, userData: ptr);

    @shared
    @expname[g_list_first]
    func getFirst (list: ptr[List]) => ptr[List];

    @shared
    @expname[g_list_last]
    func getLast (list: ptr[List]) => ptr[List];

    @shared
    @expname[g_list_nth]
    func getNth (list: ptr[List], n: Word) => ptr[List];

    @shared
    @expname[g_list_find]
    func find (list: ptr[List], data: ptr) => ptr[List];

    @shared
    @expname[g_list_find_custom]
    func findCustom (list: ptr[List], data: ptr, fn: CompareFunc) => ptr[List];

    @shared
    @expname[g_list_position]
    func getPosition (list: ptr[List], link: ptr[List]) => Int;

    @shared
    @expname[g_list_index]
    func getIndex (list: ptr[List], data: ptr) => Int;
  };
};

