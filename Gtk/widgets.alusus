@merge
module Gtk {
  type Bin {
    @injection def container: Container;

    @expname[gtk_bin_get_child]
    func getChild(): ref[Widget];
  };

  type Box {
    @injection def container: Container;

    @shared
		@expname[gtk_box_new]
		func new(orientation: Int, spacing: Int): ref[Box];

    @expname[gtk_box_pack_start]
    func packStart(child: ref[Widget], expand: Bool, fill: Bool, padding: Word);

    @expname[gtk_box_pack_end]
    func packEnd(child: ref[Widget], expand: Bool, fill: Bool, padding: Word);
  };

  type ButtonBox {
    @injection def box: Box;

    @shared
		@expname[gtk_button_box_new]
		func new(orientation: Int): ref[ButtonBox];

		@expname[gtk_button_box_set_layout]
		func setLayout(style: Int);
  };

  type Paned {
    @injection def container: Container;

    @shared
		@expname[gtk_paned_new]
		func new(orientation: Int): ref[Paned];

		@expname[gtk_paned_pack1]
		func pack1(widget: ref[Widget], resize: Bool, shrink: Bool);

		@expname[gtk_paned_pack2]
		func pack2(widget: ref[Widget], resize: Bool, shrink: Bool);

		@expname[gtk_paned_set_position]
		func setPosition(position: Int);

		@expname[gtk_paned_get_position]
		func getPosition(): Int;
  };

  type Stack{
    @injection def container: Container;

    @shared
		@expname[gtk_stack_new]
		func new(): ref[Stack];
  };

  type StackSwitcher
  {
    @injection def box: Box;

    @shared
		@expname[gtk_stack_switcher_new]
		func new(): ref[StackSwitcher];

    @expname[gtk_stack_switcher_set_stack]
    func setStack(stack: ref[Stack]);
  };

  type ListBox {
    @injection def container: Container;

    @shared
		@expname[gtk_list_box_new]
		func new(): ref[ListBox];

		@expname[gtk_list_box_prepend]
		func prepend(child: ref[Widget]);

		@expname[gtk_list_box_insert]
		func insert(child: ref[Widget], position: Int);

		@expname[gtk_list_box_get_selected_rows]
		func getSelectedRows(): ref[Glib.List];

		@expname[gtk_list_box_set_selection_mode]
		func setSelectionMode(mode: Int);
  };

  type Button {
    @injection def container: Bin;

    @shared
		@expname[gtk_button_new_with_label]
		func newWithLabel(label: ptr[array[Char]]): ref[Button];
  };

  type ToggleButton {
    @injection def button: Button;

    @shared
		@expname[gtk_toggle_button_new_with_label]
		func new(label: ptr[array[Char]]): ref[ToggleButton];

		@expname[gtk_toggle_button_set_active]
		func setActive(active: Bool);

		@expname[gtk_toggle_button_get_active]
		func getActive(): Bool;
  };

  type CheckButton {
    @injection def button: ToggleButton;

    @shared
		@expname[gtk_check_button_new_with_label]
		func new(label: ptr[array[Char]]): ref[CheckButton];
  };

  type MenuButton {
    @injection def button: ToggleButton;

    @shared
		@expname[gtk_menu_button_new]
		func new(): ref[MenuButton];

		@expname[gtk_menu_button_set_popup]
		func setPopup(widget: ref[Widget]);
  };

  type MenuShell {
    @injection def container: Container;

		@expname[gtk_menu_shell_append]
		func append(child: ref[Widget]);

		@expname[gtk_menu_shell_prepend]
		func prepend(child: ref[Widget]);

		@expname[gtk_menu_shell_insert]
		func insert(child: ref[Widget], pos: Int);
  };

  type Menu {
    @injection def menuShell: MenuShell;

    @shared
		@expname[gtk_menu_new]
		func new(): ref[Menu];
  };

  type MenuItem {
    @injection def bin: Bin;

    @shared
		@expname[gtk_menu_item_new_with_label]
		func new(label: ptr[array[Char]]): ref[MenuItem];
  };

  type Image {
    @injection def widget: Widget;

    @shared
		@expname[gtk_image_new_from_file]
		func new(filename: ptr[array[Char]]): ref[Image];

		@expname[gtk_image_set_pixel_size]
		func setPixelSize(size: Int);
  };

  type Label {
    @injection def widget: Widget;

    @shared
		@expname[gtk_label_new]
		func new(str: ptr[array[Char]]): ref[Label];

		@expname[gtk_label_set_text]
		func setText(text: ptr[array[Char]]);

		@expname[gtk_label_get_text]
		func getText(): ptr[array[Char]];
  };

  type Entry {
    @injection def widget: Widget;

    @shared
		@expname[gtk_entry_new]
		func new(): ref[Entry];

		@expname[gtk_entry_set_text]
		func setText(text: ptr[array[Char]]);

		@expname[gtk_entry_get_text]
		func getText(): ptr[array[Char]];

		@expname[gtk_entry_get_text_length]
		func getTextLength(): Int[16];

		@expname[gtk_entry_set_visibility]
		func setVisibility(visible: Bool);

		@expname[gtk_entry_set_invisible_char]
		func setInvisibleChar(chr: Int[32]);

		@expname[gtk_entry_set_width_chars]
		func setWidthChars(nchars: Int);

		@expname[gtk_entry_set_has_frame]
		func setHasFrame(hasFrame: Bool);

		@expname[gtk_entry_set_alignment]
		func setAlignment(xalign: Float);

		@expname[gtk_entry_set_placeholder_text]
		func setPlaceholderText(text: ptr[array[Char]]);
  };

  type TextView {
    @injection def container: Container;

    @shared
		@expname[gtk_text_view_new_with_buffer]
		func new(buf: ref[TextBuffer]): ref[TextView];

		@expname[gtk_text_view_set_wrap_mode]
		func setWrapMode(mode: Int);

		@expname[gtk_text_view_set_editable]
		func setEditable(setting: Bool);

		@expname[gtk_text_view_set_cursor_visible]
		func setCursorVisible(setting: Bool);

		@expname[gtk_text_view_set_justification]
		func setJustification(justification: Int);
  };

  type HeaderBar {
    @injection def container: Container;

    @shared
		@expname[gtk_header_bar_new]
		func new(): ref[HeaderBar];

		@expname[gtk_header_bar_set_title]
		func setTitle(title: ptr[array[Char]]);

		@expname[gtk_header_bar_set_subtitle]
		func setSubtitle(subtitle: ptr[array[Char]]);

		@expname[gtk_header_bar_set_custom_title]
		func setCustomTitle(widget: ref[Widget]);

		@expname[gtk_header_bar_pack_start]
		func packStart(widget: ref[Widget]);

		@expname[gtk_header_bar_pack_end]
		func packEnd(widget: ref[Widget]);

		@expname[gtk_header_bar_set_show_close_button]
		func setShowCloseButton(setting: Bool);
  };
};
