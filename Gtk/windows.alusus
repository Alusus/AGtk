@merge def Gtk: module
{
  def Window: type
  {
    @injection def container: Container;

    @expname[gtk_window_set_title]
    func setTitle (title: ptr[array[Char]]);

    @expname[gtk_window_set_titlebar]
    func setTitlebar (titlebar: ref[Widget]);

    @expname[gtk_window_set_resizable]
    func setResizable (resiable: Bool);

    @expname[gtk_window_set_modal]
    func setModal (modal: Bool);

    @expname[gtk_window_set_default_size]
    func setDefaultSize (width: Int, height: Int);

    @expname[gtk_window_set_transient_for]
    func setTransientFor (parent: ref[Window]);

    @expname[gtk_window_set_destroy_with_parent]
    func setDestroyWithParent (setting: Bool);

    @expname[gtk_window_is_active]
    func isActive () => Bool;

    @expname[gtk_window_get_focus]
    func getFocus () => ref[Widget];

    @expname[gtk_window_set_focus]
    func setFocus (widget: ref[Widget]);

    @expname[gtk_window_close]
    func close ();
  };

  def AppWindow: type
  {
    @injection def window: Window;

    @shared
    @expname[gtk_application_window_new]
    func new (app: ref[App]) => ref[AppWindow];
  };

  def Dialog: type
  {
    @injection def window: Window;

    @expname[gtk_dialog_run]
    func exec () => Int;
  };

  def MessageDialog: type
  {
    @injection def dialog: Dialog;

    @shared
    @expname[gtk_message_dialog_new]
    func new (
      parent: ref[Window], flags: Int, dlgType: Int, buttons: Int, msg: ptr[array[Char]], args: ...any
    ) => ref[MessageDialog];
  };
};
